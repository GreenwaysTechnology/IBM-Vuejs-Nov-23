				VUE JS - VUE 3
.....................................................................................

Pre Knowldege:
1.HTML 5
2.CSS 3
3.Javascript ES 5 and ES6 (Basic Features)
4.Node js fundamentals - how to use npm, package.json

Nice to have:
1.Angular
2.React

Vue => Features of Angular and Features of React
..................................................................................
What is vue.js?
 Vue is a javascript framework for building user interfaces.

What is User interface?
  The application where user interacts.

Types of user interface application:

1.Desktop applications
2.Web applications which is running browser.
3.Mobile applications
   Native,Browser based,Hybrid
4.Any other device based applications.

Types of web application:

Server side Web Application:
.............................

1.Static web apps - 1989 to 1995
https://home.cern/science/computing/where-web-was-born

2.Dynamic Content Generation Web App - 1996 to till date
  -CGI - C,Perl
  -J2EE - Java, Servlet
  -ASP - VbScript, vb
  -PHP - PHP
  -.net,nodejs,ruby..rails....
Output: HTML pages generated on fly.

3.Biz to Biz integration:
   Incase two biz organization want to share their information via internet
 DCG technology was not enough.
 Web Services:  1998 to till Date
  COMMON DATA Interchange format
   instead of exchanging html pages we can exchange data in the form of XML
  -XML - Soap Web Services
 2005 on wards - REST Full web services

,.............................................................................
Client side Web Apps:

Browser based :
 Desktop browsers
 Mobile browsers

 Powered with HTML With Javascript 
    Incase of dynamic web apps, html genereated by server and javascript changed and
 processed html pages at client side.


In 2007,W3c Introduced new web development arch, called "Single Page Web Application/SPA"

In SPA

 Client user interface applications were written using "HTML 5,CSS3,Javascript" where as server side applications are "Web Services-REST API" which serves data to the client.



SPA:
       Client User App (HTML,CSS,JS)<-------------------> REST API

SPA Frameworks:
1.Mustache.js
2.Angular.js
3.React
4.Angular
5.Vue.js
.....................................................................................
				Client side web technology
.....................................................................................

There are three primary languages

1.HTML 5
2.Javascript
3.CSS

DOM Programming:
................

What is DOM?

  if you want to understand DOM, you need to understand.

What is HTML? How it works?

HTML is the programming language, DSL/Declarative programming lanugage. Domain specific language is nothing but the language built for specific domain,which cant be used for other purposes.

Since HTML is programming language,do you think that the code written using html is compiled?

c:
 hello.c--->compile--->hello.obj(compiled code)--->run compiled code by runtime...

HTML:
Html code itself is compiled and executed- every thing happens within browser-in memory compilation.

index.html---->parsing--->parsed code---->compilation---->binary code-->run compiled code by runtime-->Final output on the screen.


index.html -  source code

<html>
 <head>
   <title>HTML</title>
 </head>
 <body>
     <h1>Welcome</h1>
 </body>
</html>
 |
 load into browser
 |
 loader- program which loads html into browser
  |
 uses http or ftp protocal.
  |
 Parser - parser is special compiler which converts source code into lexical tree	  (string tree)
 |
 html
  head
   title
      HTML
   title
 head
 body
     h1
      Welcome
     h1
 body
html
  |
 compiler-compilation- convert source code into assembly language
 |
html ---XX3434X
  head
   title
      HTML
   title
 head
 body
     h1
      Welcome
     h1
 body
html
...................................................................
Runtime:
.......
 During runtime, compiled code is loaded into main memory.
 What ever you load into main memory, there is structure.

Runtime will create LinkedList(c) for the entire html document

html - Node
  head- Node
   title -Node
      HTML
   title
 head
 body -Node
     h1  - Node
      Welcome
     h1
 body
html

Nodes are connected each other in Hierchical Structure(Tree)

Linking the Nodes (Tree)

body -Node
    |
     h1  - Node
      |
        Welcome
     h1
 body
 |
Layout Engine/Paint Engine
   |
  will convert into pxs - Final Ouput

            At End , the html page is "Tree Data Structure"
..........................***.....................................................
			The Netscap Communication and HTML Tree
.................................................................................
Netscap started a project,to access rendered "tree" via program, in order to process the rendered tree.

Netcap initally decided to introduce c program,later who decided to change their mind to "Java".

Java was not also not suitable , the reason was , java was the big language , putting the language inside browser is not suitable.

Nets cap finally decided who did not want eiter c or java, but java like language
 - "The Birth of Javascript" 

The Javascript was introduced  as light weight programming language to access the tree,process the tree.

How to reprsent html inside javascript engine?
 
 Netscap took an idea "Object" Model.

Every html element is object, which is created once the browser loads the html into browser,and also object can be created using apis..

Javascript engins forms the tree called "Object Tree"

.....................................................................................
			Netscap Objects and W3c
.....................................................................................

After Object tree model and javascript success, W3C  decided to standarize this arch/technology.

After standarization, w3c published a spec called "DOM" -  Document Object Model


How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                Every Html ELEMENT Inside Browser is "C Program"

	        Every Html ELEMENT Inside javascript engine is "Object"

HTML Elements(p,h1,div,img) are  represented inside browser as "Node", inside Javascript Engine "Object - DOM "


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine->Paint Engine-->Will repaint changes-->User will see the final result.
.....................................................................................
				DOM Programming
.....................................................................................

How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.. 2008(Angular js) 2013(react)...

Popular DOM frameworks/lib:
1.React
2.Angular
3.Vue.js

           "Vue or React or Angular are just DOM abstractions"
....................................................................................
         		Vue JS and its application type
....................................................................................

vue js is a framework used to build "different types of client side apps"

1.standalone script application.
   Enchancing html(generated by server) by adding js / js lib (jquery)

if you have traditional web apps written using server side technology like j2ee,asp.net,php which has embeded "js/jquery" lib..

    "Vue is Declarative replacement of imperative "Jquery"



2.Web Component application
  Vue supports to create web component arch based applications

3.Single Page Web Application(SPA)
    Vue is primarily popular for building SPA web applications.

4.Full stack/SSR - Server Rendered Apps
    Partial SSR - SPA + Server rendering
    Full SSR 
    SSG - Static Site Generation
    ISR  - Incremental Static Rendering

Pure SPA's has limitations when the app is sensitive to SEO and time to constent.
 Every thing happens in the browser side with respective SPA.

 Vue apps can be compiled/render in the server side.
 Server will generate html pages before sending to the browser(client) - Pre  rendering.
 https://nuxtjs.org/ -  for ssr with vuejs


5.SSG/JAMStack
   Server side static file generation(96), instead of build dynamic apps, suppose we need static apps.

  Server-side rendering can be done ahead of time if the required data is static. This means we can pre-render an entire application into HTML and serve them as static files.

 This improves site performance and makes deployment a lot simpler since we no longer need to dynamically render pages on each request. 

Vue can still hydrate such applications to provide rich interactivity on the client. This technique is commonly referred to as Static-Site Generation (SSG), also known as JAMStack.

The Vue team maintains a static-site generator called VitePress, which powers this website you are reading right now! In addition, Nuxt also supports SSG. You can even mix SSR and SSG for different routes in the same Nuxt app.
				
https://jamstack.org/

vue supported frameworks - VitePress,Nuxt

Beyond the Web:
...............

Although Vue is primarily designed for building web applications, it is by no means limited to just the browser. You can:

Build desktop apps with Electron or Tauri
Build mobile apps with Ionic Vue
Build desktop and mobile apps from the same codebase with Quasar
Use Vue's Custom Renderer API to build custom renderers targeting WebGL or even the terminal!
....................................................................................

App selections:

Whether your app is legacy server side apps built using j2ee or .net,php,rails--->
 Standalone vue.js

Your app is api centeric(webservices)/microservices
   Vue can be used as "SPA"

SPA With SSR for better optimization and SEO ready

SPA and SSR With SSG/JAM Stack - where your app is having static data and also dynamic data...
.....................................................................................
				Vue App Development
....................................................................................

Development work flows:

1.Without Build Tool
   Build tools like webpack,rollup,vitePress....
2.With Build Tool


Project Setup:

1.without build tool
2.with build tool.


1.Without build tool:
   We can create "Standalone script apps"

steps:


>mkdir vue-legacy

vue-legacy>mkdir src

vue-legacy>code .

create index.html outside src dir

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue app</title>
</head>

<body>
    <h1>Vue Application</h1>

</body>

</html>

in order to run the above html , we need some web server, 

install live server in the vs code as Extension..

open index.html using live server.

in order to integrate vue with existing html

you have to add script which is distributed by vue community via "cdn".

There are two builds:
1.dev build
2.prod build

Dev Build

<script src="https://unpkg.com/vue@3"></script>

You are running a development build of Vue.
Make sure to use the production build (*.prod.js) when deploying for production.


Prod Build
     <script src="https://unpkg.com/vue@3.3.9/dist/vue.global.prod.js"></script>

eg:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue app</title>
    <!-- Dev build -->
    <!-- <script src="https://unpkg.com/vue@3"></script> -->
    <!-- Production Build -->
    <script src="https://unpkg.com/vue@3.3.9/dist/vue.global.prod.js"></script>

</head>

<body>
    <h1>Vue Application</h1>

</body>

</html>
.....................................................................................

Core concepts of Vue
....................
			   Vue Application

Vue is just javascript framework, offers apis,infrastructure to build "DOM" programming.

DOM Programming:
1.create element or elements 
   When we create elements we create tree model-DOM tree
2.update existing elements content
3.remove/delete existing element content and element itself
4.list/walk through tree
5.we may change style dynamically
6.we interact with ui and change the ui.

Vue is javascript dom programming framework 

There are two ways of programming in UI:

1.imperative programming
    The way of write program using complex logics, more boiler plate code.
eg:
  create element using plain js
  create element using jQuery

Eg: Imperative way of creating dom elements using plain js.
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue app</title>
    <!-- Dev build -->
    <!-- <script src="https://unpkg.com/vue@3"></script> -->
    <!-- Production Build -->
    <script src="https://unpkg.com/vue@3.3.9/dist/vue.global.prod.js"></script>

</head>

<body>
    <h1>Vue Application</h1>
    <div id="root">

    </div>
    <script>
        function createElement() {
            console.log('....init....')
            const Heading = document.createElement('h1')
            //set properties
            Heading.innerHTML = 'Hello,DOM'
            Heading.style.color = 'blue'
            document.getElementById('root').appendChild(Heading)
        }
        createElement()
    </script>
</body>

</html>
.....................................................................................

2.declarative programming

 =>write less code
 =>Abstract DOM apis with readable constructs 
 =>introduce declarative templates
Note:
 Template driven technology introduced in server side computing in 1990's
 2006, the first template driven technology was introduced in javascript called
 mustache.js ( {{}}})
 Template = static + dynamic  content , where dynamic content is interpolated into code. 
 eg <h1>Hello {{name}} </h1>

 "Vue is based on declarative , which extends standard HTML with a template syntax"
				+
	java script => binds the state(data)/ biz logic

HTML + Extra Syntax + Bizlogic+data = Vue.js

How vue represents UI?

=>Vue creates UI dynamically(DOM)
=>Vue organizes the UI into smaller and smaller UI
=>VUE breaks the complex UI into Smallar UI
    This model is called called as "Compostion"


Why Compostion?
=>The UI can be reused any where in the app and also outside app.
=>The code maintaince is very easy,because it is independant.

	    "The arch is called as Component Driven Arch"


Component means parts of something.

.....................................................................................
			 Vue Instance /Application Object
.....................................................................................

In vuejs, the whole application(User interface), is composed into the object called
"Vue instance".

Vue Versions:

Vue 2.x
Vue 3.x

Vue Instance Creation:
......................
Vue 2
......

var app = new Vue({})

Vue 3:

We can get Vue instance:

 1.Via Global Vue Variable
 2.Via ES  6 Modules
...................................................................................
			A.Vue Instance via Vue Global Variables
...................................................................................
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue app</title>
    <!-- Dev build -->
    <!-- <script src="https://unpkg.com/vue@3"></script> -->
    <!-- Production Build -->
    <script src="https://unpkg.com/vue@3.3.9/dist/vue.global.prod.js"></script>

</head>

<body>
    <h1>Vue Application</h1>
    <div id="root">
    </div>
    <!-- Create vue instance via Vue Global Variable -->
    <script>
        const vueInstance = Vue
        console.log(vueInstance)
        console.log(vueInstance.version)
    </script>
</body>

</html>
.....................................................................................
			B.Getting Vue instance via ES  Modules
.....................................................................................

ES 6 Module Keywords
 export
 export default
 import

Can we use ES6 module keywords inside browser directly?

  Not Possible , es 6 keywords wont work directly, but modern browsers support es 6 module  are supported via some configuration.

Eg: How to use es 6 modules inside browser.

src/name.js
export const name='Subramnaian'

src/index.js
import { name } from "./name";
console.log(name)

No, in older browsers
yes in modern browsers

Generally browser has no facility to link files and share code using "ES 6 modules keyword "

"Uncaught SyntaxError: Cannot use import statement outside a module (at index.js:1:1)

How to run es 6 module based apps inside browsers

Solution:

1.Using build tools - webpack,rollup.
   React,angular uses this tool behind it.

2.Using browser alone
   using type=module

 Recently browsers vendors added a capability to link files at browser level, this is still in experimental mode- many browsers(old browsers may not support)	
...................................................................................
			 ES 6 Modules and Browsers

src/name.js
export const name='Subramanian'
src/index.js
import {name} from './name.js'

console.log(name)

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue</title>
    <script src="src/index.js" type="module"></script>
</head>
<body>
    <h1>ES 6 Modules</h1>    
</body>
</html>

Note:
 when you import you have to use "fileName.js"  
eg : import {name} './name.js" 
 in script tag add type="module" attribute

.....................................................................................
			Can we use import statement inside html

can i import "src/name.js or src/index.js" inside script section of html.

2.Using browser alone
   Dynamically Import JavaScript with Import Maps

if you want import any js code within html file.
<script type="importmap">
  // JSON object defining import
</script>

eg:
<script type="importmap">
  {
    "imports": {
      "square": "./module/shapes/square.js",
      "circle": "https://example.com/shapes/circle.js"
    }
  }
</script>

eg;
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES 6 Module app</title>
    <script type="importmap">
        {
            "imports": {
                "name": "./src/name.js"
            }
        }
    </script>
</head>

<body>
    <h1>ES 6 Module Application</h1>
    <script type="module">
        import { name } from 'name'
        console.log(name)
    </script>
</body>

</html>

Note:
Import Maps Browser Support

Import maps are supported by default in Chromium-based browsers, so we recommend using Chrome or Edge during the learning process.

If you are using Firefox, it is only supported in version 102+ and currently needs to be enabled via the dom.importMaps.enabled option in about:config.

If your preferred browser does not support import maps yet, you can polyfill it with es-module-shims.

    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>


How to use vue using importMap syntax:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Es 6 modules</title>
    <!-- Polyfil for import map -->
    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
          "imports": {
            "name":"./src/name.js",
            "vue" : "https://unpkg.com/vue@3/dist/vue.esm-browser.js"
          }
        }
      </script>
</head>

<body>
    <h1>Using ES 6 Modules within HTML</h1>
    <script type="module">
        import { name } from 'name'
        import { createApp } from 'vue'

        //calling createApp function,which returns "Vue Instance"
        const app = createApp()
        console.log(app)
        console.log(`version`,app.version)
        console.log('name', name)
    </script>
</body>

</html>
.....................................................................................
	Vue is Root Instance having lot of methods (factory methods)

createApp: (...args) => {…}
createBlock: ƒ createBlock(type, props, children, patchFlag, dynamicProps)
createCommentVNode: ƒ createCommentVNode(text = '', // when used as the v-else branch, the comment node must be created as a // block to ensure correct updates. asBlock = false)
createElementBlock: ƒ createElementBlock(type, props, children, patchFlag, 
etc...


Vue is component based framework, createApp method takes root/Entry component

function createApp(rootComponent: Component, rootProps?: object): App

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES 6 Module app</title>
    <!-- Poly fill lib for import map -->
    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports": {
                "vue" : "https://unpkg.com/vue@3/dist/vue.esm-browser.js"
            }
        }
    </script>
</head>

<body>
    <div id="root">

    </div>
    <script type="module">
        //step 1: import factory method called createApp from the root vue instance
        import { createApp } from 'vue'
        //step 2: create application instance and pass root component
        const AppComponent = {
            template: `
                <h1>Welcome to Vue Application</h1>
            `
        }
        const app = createApp(AppComponent)

        //Mount root component into root element
        console.log(app)
        //pass selector as parameter to the mount method
        app.mount('#root')

    </script>
</body>

</html>
.....................................................................................
		   User interface development Guidelines
.....................................................................................

1.User interface must be broken into smallar and smaller -Composition- Component Model.

2.User interface is organized in tree structure
    That is basic html design model, we need to follow the same.

 <div>
     <div></div>
     <div></div>
     <div></div>
     <div></div>
 </div>
3.In tree model, there must be one root Element.
.....................................................................................
			 Root Component- root Element
....................................................................................

Component creations:

1.React

  function Logo(){
	return <img src="logo.png"/>
  }
2.In Angular
 
  @Component({selector:'app-logo',template:'<img src="logo.png"/>'})
  export class Logo {}

3.In Vue
 Component is Object which is represented as literal object.

const Logo= { 

}
What a Component can hold?

component's meta data

const Logo= { 
  template:'',
  render:'''
  compilerOptions:{},
  data:function(){}
}

1.UI/Rendering - HTML,CSS(Markup)
..................................
 template
 render
 compilerOptions

2.State -(data) - javascript
 data 
 props
 computed
 methods
 watch
 emits
 expose

3.Life Cycle hooks(methods)
beforeCreate
created
beforeMount
mounted
beforeUpdate
updated
beforeUnmount
unmounted
errorCaptured
renderTracked
renderTriggered
activated
deactivated
serverPrefetch

4.Composition
 provide
 inject
 mixins
 extends

Misc
name
inheritAttrs
components
directives

Component Instance api and variables
$data
$props
$el
$options
$parent
$root
$slots
$refs
$attrs
$watch()
$emit()
$forceUpdate()
$nextTick()


const Logo ={
  ui: {},
  state:{}
  others:{}
  methods:{} 
}
.....................................................................................
			 Vue Application setup using Build tools
.....................................................................................

Build tools are js based tools for create ,manage js app work flows.
Build tools are based npm.

Setup Vue Project using build tool based: CLI based apporach.
.............................................................

There are two cli tools

1.Vue-cli
  https://cli.vuejs.org/#getting-started
Vue- cli is now in maintance mode, meaning that , which is only used for creating old vue project(v2)

2.Vite
https://vitejs.dev/guide/
Next Generation Frontend Tooling project, used to create no of project types.


We are going to follow Vite base project setup

npm init vue@latest

This is abstraction for vite based project templates


Create vue js (vue 3) project based on vite.

>npm init vue@latest
Need to install the following packages:
create-vue@3.8.0
Ok to proceed? (y) y

Vue.js - The Progressive JavaScript Framework

√ Project name: ... vue-app
√ Add TypeScript? ... No / Yes
√ Add JSX Support? ... No / Yes
√ Add Vue Router for Single Page Application development? ... No / Yes
√ Add Pinia for state management? ... No / Yes
√ Add Vitest for Unit Testing? ... No / Yes
√ Add an End-to-End Testing Solution? » No
√ Add ESLint for code quality? ... No / Yes

Scaffolding project in E:\session\IBM\2023\Nov\VueJs\vue-app...

Done. Now run:

  cd vue-app
  npm install
  npm run dev

cd vue-app
code .
.....................................................................................

Folders and File Structure:
..........................

package.json

{
  "name": "vue-app",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "test:unit": "vitest"
  },
  "dependencies": {
    "vue": "^3.3.4"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^4.4.0",
    "@vue/test-utils": "^2.4.1",
    "jsdom": "^22.1.0",
    "vite": "^4.4.11",
    "vitest": "^0.34.6"
  }
}

vite.config.js
 It is build tool for vue application.

import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vite App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
....................................................................................
src
 |
 main.js 
   It is entry file for vue applications
|
components
  It is going to hold other components

src/assets
  |
  logos,pictures,css files

How to test the application?

npm run dev
.....................................................................................
		             VUE Coding Style
.....................................................................................
Vue coding can be classified into two category.

Vue 2.x and Vue 3.x

Note: Inside vue 3, we can use Vue 2 style coding...

Vue coding can be classified based on API Style:

1.Options API Based Style 
   -Vue 2.x and Vue 3.x
   -It is old way of writing coding
2.Composition API Based Style
   -Vue 3.X based 
.....................................................................................
			Component creational Patterns
.....................................................................................

There are two patterns available to create components.

1.Plain Javascript pattern
2.Single File Components- SFC Pattern

1.Plain Javascript Pattern.
 
  As the name suggest, Plain javascript pattern, encapsulate the component inside literal object.

Without build tool: Standalone script application:

const App = { 
  template:`<h1>Hello</h1>`
}

With build tool: SPA

App.js

export default {
  //options
  ..options
}

It is more on imperative way of writing coding: It is not recommended
......

2.Single File Components- SFC Pattern
 
 As name suggests, All component logic would be inside single file.
 It is more declarative way of writing code, It is highly recommended

....................................................................................

     "Plain Javascript Pattern is used inside Standalone Script application"-Without                                   build tool

     "SFC pattern is used inside  build work flow"

Eg:
Plain javascript pattern:

index.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES 6 Module app</title>
    <!-- Poly fill lib for import map -->
    <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.5/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports": {
                "vue" : "https://unpkg.com/vue@3/dist/vue.esm-browser.js",
                "app" : "./src/App.js"
            }
        }
    </script>
</head>

<body>
    <div id="root">

    </div>
    <script type="module">
        //step 1: import factory method called createApp from the root vue instance
        import { createApp } from 'vue'
        import AppComponent from 'app'
        const app = createApp(AppComponent)
        //pass selector as parameter to the mount method
        app.mount('#root')

    </script>
</body>

</html>

src/App.js

export default {
    template: `
        <div>
            <h1>Hello Vue </h1>
        </div>
    `
}
................................................................................
	Plain javascript is usefull where there is no build workflow
	SFC is usefull and necessary in build work flow
	
	Plain javascript pattern files are saved with ".js" extension
	SFC pattern files are saved with ".vue" extension
.....................................................................................
				SFC pattern
.....................................................................................
In SFC pattern file, contains three segments

1.template
   Collection of html elements and vue instructions
2.javascript
   Collection of variables and methods- biz logic
3.style
  CSS style for a component

IN SFC pattern we isloate very clearly into three sections.

SFC files are saved with ".vue" extension.	

<script>
   //all javascript code goes
</script>

<template>
   // template code
</template>

<style>
  //style code
</style>

eg:
SFC pattern:

src/App.vue

<!-- Three segments -->
<script></script>
<template>
    <div>
        <h1>Welcome to Vue</h1>
    </div>
</template>
<style></style>

src/main.js
// import './assets/main.css'
import { createApp } from 'vue'

import App from './App.vue'

createApp(App).mount('#app')

.....................................................................................
		"Going Foward we focus only SFC pattern"
.....................................................................................
Inside SFC, We can use either Options API based style or Composition Api based style.

			Commonality between both patterns
	     	        (Options api and Composition api)

1.Code segementation is same for both patterns

 <script></script>
 <template></template>
 <style></style>
.....................................................................................

Options API pattern:
....................

In Options API pattern, we return Options object, which contains necessary configuration.

<script>
 //return options object
 export default {
    //options
 }
</script>

Sample:
<script>
export default {
    props: ['something'],
    data() {
        return {
            name: 'Subramaian'
        }
    }
}
</script>
<template>
    <h1>Components Using Options API Pattern</h1>
</template>
<style></style>

 }
</script>

.....................................................................................
				Composition API Pattern
.....................................................................................

=>It is vue 3.x style of writing code.
=>In this pattern, we define a component logic's using imported api functions
=>In this pattern, we can write js directly within script tag.
=>In composition pattern we have two style of coding.


			Composition API Pattern
				|
	-------------------------------------------------------
	|                                                    |
    with setup function                                    with setup attribute



with setup function:

1.It looks like Options api pattern but code refactoring has been done.
2.It looks like imperative style of compostion api.

<script>
// compostion api pattern;using setup function
export default {
    setup() {
        //all js initalization code will go
    }
}
</script>
<template>
    <h1>Compostion API pattern using setup function</h1>
</template>
<style></style>

with setup attribute:
.....................
=>It is same as setup function only but it is more declarative.
=>It has been built on the top of setup function...
=>We dont need to write extra code, vue compiler will write for us.

<!-- Compostion api using setup attribute -->
<script setup>
// all javascript code is written directly into script tag. looks like normal js code
const name = 'Subramanian'
</script>
<template>
    <h1>Compostion API pattern using setup function</h1>
</template>
<style></style>

				     Vue App
		   			|
			---------------------------------------  
			With Build tool                  without build tool
				 |				|
			SFC Component            	 Script based (refer above)
				   |
	----------------------------------------------------------------
        |                                                             |
        |                                                             |

      Options Api                                              Composition Api
	 |                                                          |
   Vue 2 based apps                                           Vue 3 based apps
							        												|	
		  							|
				----------------------------------------------------
				|                                       |
	      	with setup function                           with setup attribute

	
Component with Options api:
...........................
<!-- Options api pattern -->
<script>
// Options Object : we have to return always options Object
export default {
   //js logic goes
}
</script>
<template>
 <h1>Options Api Demo</h1>
</template>
<style>

</style>

Component with compostion api : with setup function
<script>
export default {
    setup() {

    }
}
</script>
<template>
    <h1>Composition api with setup function</h1>
</template>
<style>

</style>

Composition with setup attribute:
<script setup>

</script>
<template>
    <h1>Composition api with setup Attribute</h1>
</template>
<style>

</style>
.....................................................................................
			    Component Composition
.....................................................................................
Organization of comonents in hierachical order.

<div id="root">
   <App>
	<Hello></Hello>
   </App>
</div>

Component Compostion with "Options Api":
.........................................

src/components/Hello.vue
<script>
</script>
<template>
    <h1>Hello Component</h1>
</template>
<style></style>

src/App.vue
<script>
import Hello from './components/Hello.vue';

</script>
<template>
    <h1>Application</h1>
    <Hello />
</template>
<style></style>

After running,you will not able to see the Hello component output.

Every component is object, must have been created.
Who will create component?
 Vue runtime need to create Component..

In the above example the component has not been created, thats why did not see output.

How to tell vue to create component?

Via Configuration,It is similar to angular DI configuration.

In options api, we need to configure via "components" key.

eg:
src/App.vue

<script>
import Hello from './components/Hello.vue';

// options api 
export default {
    // Registring components/ tell to vue engine to create component
    components: {
        //Hello: Hello
        Hello
    }
}

</script>
<template>
    <h1>Application</h1>
    <Hello />
</template>
<style></style>


More Components:
................
src/components/Hai.vue
<script>
</script>
<template>
    <h1>Hai Component</h1>
</template>
<style></style>

src/App.vue
<script>
import Hello from './components/Hello.vue';
import Hai from './components/Hai.vue'

// options api 
export default {
    // Registring components/ tell to vue engine to create component
    components: {
        //Hello: Hello
        Hello,
        Hai
    }
}

</script>
<template>
    <h1>Application</h1>
    <Hello />
    <Hai />
</template>
<style></style>
.....................................................................................
			Component composition with Composition api
.....................................................................................

setup function:
...............
<script>
import Hello from './components/Hello.vue';
import Hai from './components/Hai.vue'

//compostion api: setup function
export default {
    // Registring components/ tell to vue engine to create component
    components: {
        //Hello: Hello
        Hello,
        Hai
    },
    setup() {

    }
}

</script>
<template>
    <h1>Application</h1>
    <Hello />
    <Hai />
</template>
<style></style>

setup  attribute:
.................
<script setup>
import Hello from './components/Hello.vue';
import Hai from './components/Hai.vue'
</script>
<template>
    <h1>Application</h1>
    <Hello />
    <Hai />
</template>
<style></style>
.....................................................................................
.....................................................................................

Assigment-1:
............
Create Layout Components

1.header
   |
   Logo
   SearchPanel
   LoginPanel
2.main
   |
   three sections
    -Vue features
3.Footer
   |
   Sponors
   copyright

You have to try

1.Options api
2.Compositions api with imperative (setup fun) and declarative Patterns (setup attr)
.....................................................................................
			   Component Registrations -Creations
.....................................................................................

A vue component needs to be "registered" so that vue knows to locate its implemnetation when it is encountered in a template.


Two Types Registration:

1.Global Registrat

ion 
   Global Components
2.Local Registration
  Local Components

Application Object:
 It is container object which contains other objects.

How to create Application object?

const app=createApp(rootComponent)

Here "app" is just variable which points application object

Application Object having lot of methods:

app.component()
app.use()
app.provide()
etc...
https://vuejs.org/api/application.html

Global components;

const app=createApp(rootComponent)

import { createApp } from 'vue'

const app = createApp({})

// register an options object
app.component('my-component', {
  /* ... */
})

// retrieve a registered component
const MyComponent = app.component('my-component')
.....................................................................................

How to create global components and use them?

Global components and options API:
.................................

// import './assets/main.css'
import { createApp } from 'vue'
import StatusBar from './components/StatusBar.vue'

import App from './App.vue'

// createApp(App).mount('#app')
const app = createApp(App)

//Global Components
app.component('StatusBar', StatusBar)

app.mount('#app')


.....................
App.vue

//Options Api pattern
<script>
// import StatusBar from './components/StatusBar.vue'
export default {
    components: {
        // StatusBar
    }
}
</script>
<template>
    <StatusBar></StatusBar>
</template>

//Composition api with setup function:
<!-- <script>
// import StatusBar from './components/StatusBar.vue'
export default {
    components: {
        // StatusBar
    }
}
</script>
<template>
    <StatusBar></StatusBar>
</template> -->

<script>
export default {
    components: {
    },
    setup() {

    }
}
</script>
<template>
    <StatusBar></StatusBar>
</template>

//Composition api with setup function:

<script setup>
</script>
<template>
    <StatusBar></StatusBar>
</template>
.....................................................................................

Code Refactoring with main.js:
// import './assets/main.css'
import { createApp } from 'vue'
import StatusBar from './components/StatusBar.vue'

import App from './App.vue'

// // createApp(App).mount('#app')
// const app = createApp(App)

// //Global Components
// app.component('StatusBar', StatusBar)

// app.mount('#app')

//chainining pattern 
createApp(App).component('StatusBar', StatusBar).mount('#app')
.....................................................................................
			  Local Components and Registration
.....................................................................................

Components are registered when the child component is created.

In Options and Compositions setup function:
............................................
<script>
// import StatusBar from './components/StatusBar.vue'
export default {
    components: {
        // StatusBar
    }
}
</script>
<template>
    <StatusBar></StatusBar>
</template> -->

 <script>
export default {
    components: {
    },
    setup() {

    }
}
</script>
<template>
    <StatusBar></StatusBar>
</template>

Compostion setup attribute:
...........................


<script setup>
import StatusBar from './components/StatusBar.vue'
</script>
<template>
    <StatusBar></StatusBar>
</template>
.....................................................................................
			 Global components vs Local components
.....................................................................................

=>Global registration prevents build systems from removing unused components (a.k.a "tree-shaking").

=>If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle.

=>Global registration makes dependency relationships less explicit in large applications. 

=>It makes it difficult to locate a child component's implementation from a parent component using it.
....................................................................................
			  ....................................................................................
			 Component Naming Conventions
.....................................................................................

PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion.

<PascalCase /> makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components).


This is the recommended style when working with SFC or string templates. However, as discussed in DOM Template Parsing Caveats, PascalCase tags are not usable in DOM templates.

The Component names can be kebab-case /dash case eg
   <app-root>
   <hello-world>
   
	Vue supports both cases , but highly recommened is Pascal Case

=>This can affect long-term maintainability similar to using too many global variables.

=>Global Components need to be imported inside any where

App.vue

<script setup>
import Hello from './components/Hello.vue'
</script>
<template>
    <!-- Pascal case -->
    <StatusBar></StatusBar>
    <Hello></Hello>
    <!-- Keb-case -->
    <status-bar></status-bar>
    <hello></hello>
</template>

....................................................................................
			  Vue dev tool
....................................................................................

https://devtools.vuejs.org/guide/installation.html
.....................................................................................
			  Templates
.....................................................................................

Template is representation of "View"
View is runtime representation of User interface.
View is typically DOM tree.

Types of Templates:
1.static template
   It is having pure html code
2.Dynmic template 
  It is template having html code and vue instructions
Vue instructions are special symbols and notations

Template = html + vue instructions(data, events,props)


Data Binding:
............
  Passsing data from the component to View and View to Component

Types of Data binding:
1.Interpolation
2.Property and Props binding
3.Attribute binding
4.Event Binding
5.Two way data binding
6.Class and Style binding
....................................................................................
			  Design patterns behind user interface building

1.Angular follows MVC Design pattern
2.React follows flux design pattern.
3.Vue follows MVC Desgin pattern.

MVC
M-Model-Data
V-View
C-Controller.

Vue and MVC:

<script>
   // M + C ->logic
</script>
<template> 
   View logic 
</template>
<style>
</style>

 Component = {Model+Controller(Script) ,View(template,style)}

...................................................................................
				Interpolation
....................................................................................

Transfering data(state) from (controlller) to View.

State:
  State Can be represented in two ways

1.primitives - numbers,strings,boolean
  let name='subramanian'
  let salary=100
  let isValid=true
2.objects and collections -  literal object,arrays
  
  let profile = {
    id:1,
    name:'Arun'
  }
  let profiles = [{
    id:1,
    name:'Arun'
  },{
    id:2,
    name:'Bala'
  }]
.....................................................................................
SFC pattern:
-Using options api
-Using composition api
  ->with setup function
  ->with setup attribute


Using Options api:
 where we can declare data/state? How to bind in ui.

let options = { 
  data:?
  props: ?
  methods: ?
}
<script> 
export default {
  data:function(){
	
	return {}//state object
  }
}

</script>

data is function, which encapsulation state(Model)
data fuunction must return object which encapuslate "state/model"

syntax

ES 5 way of declaration:
<script> 
export default {
  data:function(){
	
	return {}//state object
  }
}

</script>
ES 6 Way of declaration

<script> 
export default {
  data(){
	
	return {}//state object
  }
}

</script>
eg:
App.vue
<!-- State Using Options API -->

<script>
export default {
    data() {
        //state object
        return {
            name: 'Subramanian'
        }
    }
}
</script>
<template>
    
</template>

How to show the variable inside view (Template)?

Via data binding - interpolation  {{Variable}}

<!-- State Using Options API -->

<script>
export default {
    data() {
        //state object
        return {
            name: 'Subramanian'
        }
    }
}
</script>
<template>
    <h1>Your name is {{ name }}</h1>
</template>

More Data:
..........
<!-- State Using Options API -->

<script>
export default {
    data() {
        //state object
        return {
            firstName: 'Subramanian',
            lastName: 'Murugan',
            status: true,
            address: {
                city: 'Coimbatore',
                state: 'Tamil Nadu'
            },
            points: 100

        }
    }
}
</script>
<template>
    <h1>Your name is {{ firstName }} {{ lastName }}</h1>
    <h2>Status {{ status ? "Available" : "Not Available" }}</h2>
    <h2>Address {{ address.city }} {{ address.state }}</h2>
    <h3>Points {{ points }}</h3>
</template>
.....................................................................................
			 Composition API - Using setup function
....................................................................................

export default {
 
  setup(){

   //return state object.
   return { }
 }

}

App.vue

<!-- State Using Composition  API using setup function -->

<script>
export default {
    setup() {
        return {
            firstName: 'Subramanian',
            lastName: 'Murugan',
            status: true,
            address: {
                city: 'Coimbatore',
                state: 'Tamil Nadu'
            },
            points: 100

        }
    }
}
</script>
<template>
    <h1>Your name is {{ firstName }} {{ lastName }}</h1>
    <h2>Status {{ status ? "Available" : "Not Available" }}</h2>
    <h2>Address {{ address.city }} {{ address.state }}</h2>
    <h3>Points {{ points }}</h3>
</template>

Use case : How to declare state using local variables and return state?

<!-- Composition api using setup function  -->
<script>
export default {
    setup() {
        const firstName = 'Subramanian'
        const lastName = 'Murugan'
        const status = true
        const address = {
            city: 'Coimbatore',
            state: 'Tamil Nadu'
        }
        const points = 100
        return {
            // firstName: firstName,
            // lastName: lastName,
            // status: true,
            // address: address,
            // points: points
            firstName, lastName, status, address, points
        }
    }
}
</script>
<template>
    <h1>Your name is {{ firstName }} {{ lastName }}</h1>
    <h2>Status {{ status ? "Available" : "Not Available" }}</h2>
    <h2>Address {{ address.city }} {{ address.state }}</h2>
    <h3>Points {{ points }}
    </h3>
</template>
..................................................................................
			Using setup attribute
...................................................................................
<!-- Composition api using setup attribute  -->
<script setup>
const firstName = 'Subramanian'
const lastName = 'Murugan'
const status = true
const address = {
    city: 'Coimbatore',
    state: 'Tamil Nadu'
}
const points = 100
</script>
<template>
    <h1>Your name is {{ firstName }} {{ lastName }}</h1>
    <h2>Status {{ status ? "Available" : "Not Available" }}</h2>
    <h2>Address {{ address.city }} {{ address.state }}</h2>
    <h3>Points {{ points }}
    </h3>
</template>
....................................................................................
				Directives
....................................................................................
What is directive?
  Directive is object which helps to create custom elements and attributes.
  Directive enchances exsiting html elements- We extend the functionality of HTML   elements.
  We are going to add new behaviour to the HTML elements.

Custom elements and attributes:
.................................

<h1>hello</h1> -  In built element. It is part of html lanaguge.

HTML Runtime:

 When  html runtime encounters h1 element, it knows how to represent.

<hello>
 When  html runtime encounters hello element,it throws Runtime Error called,
 "UnknowElement" Exception, if UnknownElement Exception is thrown, browser  automatically converts it into  "PlainText" Node , renders it.

In 2007, W3c introduced new feature called "custom element feature", According to custom element, we can introduce custom element.

How to teach browser to understand custom element?
 via "Javascript".

w3c introduced new api called customElements.define("popup-info", PopupInfo);

Custom attributes:
.................

Similar to custom elements we can add custom attribute also, through which we can add new meaning to existing html elements

<div style>
     | 
    built in attribute

<div my-if>
      |
     custom attribute------>js 

In frameworks like angular and vue, we have feature called directives(custom elements and attributes)

<root>
<hello-world>
<status-bar>

Every component is custom element/directive.


<app-drawer> ---|JS Code--->Runs ---renders in the browser....

eg:
<script setup>
import AppDrawer from './components/drawer/AppDrawer.vue'
</script>
<template>
<h1>Drawer App</h1>
<!-- Custom element -->
<app-drawer></app-drawer>
</template>
<style>

</style>

src/componnets/drawer/AppDrawer.vue
<script setup>
</script>
<template>
    <p>Drawer Element</p>
</template>
<style>
</style>

.....................................................................................
.....................................................................................
			Custom Attributes
.....................................................................................

1.Built in element Attributes

 <img src="" alt="">
       |      |
   Attributes - Built in attributes

Browser knows how to put logic to src and alt.

2.Custom attributes on existing html elements

<img customAttribute />
        | 
     custom attribute
How to teach browser to parse custom Attributes 
  "Through Javascript"

eg: Vue rendered page:

<div id="app" data-v-app="">
.....................................................................................
	Vue.js Helps to add Custom attributes on existing elements via "Directives" -				Attribute Directives
.....................................................................................
Vue js attribute directive syntax:

v-directiveName

Built in Directives:
...................
v-text
v-html
v-show
v-if
v-else
v-else-if
v-for
v-on
v-bind
v-model
v-slot
v-pre
v-once
v-memo
v-cloak

Special Attributes
key
ref
is

Built in custom elements(custom directives/components)
.......................................................
<Transition>
<TransitionGroup>
<KeepAlive>
<Teleport>
<Suspense>

Special Elements
<component>
<slot>
<template>
....................................................................................
			  v-text and v-html
....................................................................................
v-html: innerHTML 
 inerts data into html element as " Inner HTML"
The same thing we can achive through {{}} interpolation

v-text: innerText
 inserts data into HTML elment as "Inner Text"

v-html and v-text both are same but the data representation is different.
v-html inserts 'HTML Node' Where v-text inserts Plain Text Node.

<script setup>
const name = 'Subramanian'
</script>
<template>
    <h1>Interpolation using mustache notation</h1>
    <h2>Name {{ name }}</h2>
    <h1>Interpolation using Directive -v-html</h1>
    <h2 v-html="`Name ${name}`"></h2>
    <h1>Interpolation using Directive -v-text</h1>
    <h2 v-text="`Name ${name}`"></h2>
</template>
<style></style>
....................................................................................
			v-bind
...................................................................................

V-binds attach html attributes or component values(props) dynamically

Binding : attach value to the attribute.

Types of binding:
.................
1.static binding
2.dynamic binding

1.static binding

<img src="logo.png">

 here the value of src cant be changed once it is rendered.

2.dynamic binding

<img v-bind:src="logo.png">

 here v-bind:src is dynamic binding, that src value can be changed dynamically.

<script setup>
const imgUrl = "/src/assets/logo.svg"
const isEnabled = false
const isHidden = false
</script>
<template>
    <h1>Bind directives</h1>
    <div>
        <h1>Static binding</h1>
        <img src="./assets/logo.svg" height="100" width="100">
    </div>
    <div>
        <h1>Dynamic binding</h1>
        <img v-bind:src="imgUrl" height="100" width="100">
    </div>
    <div>
        <h1>Dynamic binding with enabled and disabled</h1>
        <button v-bind:disabled="isEnabled">Click</button>
    </div>
    <div>
        <h1>Dynamic binding with show and hide</h1>
        <article v-bind:hidden="isHidden">This is article</article>
    </div>

    <h1>Vbind short cut :we dont need to use v-bind every time rather we can use :attribute</h1>

    <div>
        <h1>Dynamic binding</h1>
        <img :src="imgUrl" height="100" width="100">
    </div>
    <div>
        <h1>Dynamic binding with enabled and disabled</h1>
        <button :disabled="isEnabled">Click</button>
    </div>
    <div>
        <h1>Dynamic binding with show and hide</h1>
        <article :hidden="isHidden">This is article</article>
    </div>
</template>
<style></style>
.....................................................................................
				Props - Properties
.....................................................................................
			Component driven Principles
.....................................................................................

>Component is just object.
>Component just represents "UI Widget".

Why Components?

-> Components are used to break large UI into smaller, so that we can resue any where in the app and also out side that means inside another app
   ->Reuseablity is key feature.

->Components encapuslate data , which cant be constant , incase if we reuse them into antoher place.

for eg:
  i am going to create gird component, so here i cant have data for the grid that cant be constant.
  Grid need to be configured based on data, that means i need to pass data from outside to the component.

Components means it should be configurable....

How to configure the component with data?

Via  "props" or property.

Props or property is way of passing data to the component.
...................................................................................
		 Data sharing patterns in vue
.....................................................................................

Data can be shared to the compoent in many ways.

1.Props pattern
   Data is shared to the component from the outside of that component.
   outside means, parent component
   passing data from partent to child
2.State pattern
   Data is encapsulated within component.

Props Pattern
Syntax:

From the parent compoenent template
<template>
   <Child  title="value" :value="variable" />
</template>

  <Child  title="value" :value="variable" />
	   |              |
        props           props="variable"

here title is property which value is static
:value is also property which value is dynamic
.....................................................................................
			 Props -Pattern implementation
....................................................................................

How to pass data from parent component to child component?

Since we have many coding patterns(options api, compositions api)

Props with Options api:

src/components/props/ProductMaster.vue
<script>
import ProductDetails from './ProductDetails.vue'
export default {
    components: {
        ProductDetails
    },
    //product data 
    data() {
        return {
            product: {
                id: 1,
                name: 'Phone',
                category: 'Apple',
                qty: 100,
                model: 'IPHONE 15 plus',
                price: 94000,
                inStock: true
            }
        }
    }
}
</script>
<template>
    <h1>Product Master</h1>
    <ProductDetails  title="Product Details Page" :product="product" />
</template>
<style></style>

src/components/props/ProductDetails.vue

<script>
export default {
    props: ['title', 'product']
}
</script>
<template>
    <h1>{{ title }}</h1>
    <div>
        <h1>ID {{ product.id }}</h1>
        <h2>{{ product.name }}</h2>
        <p>Category {{ product.category }}</p>
        <p>Qty {{ product.qty }}</p>
        <p>Price {{ product.price }}</p>
        <p>Stock {{ product.inStock ? "Available" : "Not Available" }}</p>
    </div>
</template>
<style></style>

...................................................................................

Compostition with setup function:
.................................

src/components/props/ProductMaster.vue

<!-- Props with Compostion api with setup function -->
<script>
import ProductDetails from './ProductDetails.vue'
export default {
    components: {
        ProductDetails
    },
    setup() {
        const product = {
            id: 1,
            name: 'Phone',
            category: 'Apple',
            qty: 100,
            model: 'IPHONE 15 plus',
            price: 94000,
            inStock: true
        }
        return {
            product
        }
    }
}
</script>
<template>
    <h1>Product Master</h1>
    <ProductDetails title="Product Details Page" :product="product" />
</template>
<style></style>

src/components/props/ProductDetails.vue

<!-- Props with Compostion api -with setup function -->
<script>
export default {
    props: ['title', 'product'],
    setup() {

    }
}
</script>
<template>
    <h1>{{ title }}</h1>
    <div>
        <h1>ID {{ product.id }}</h1>
        <h2>{{ product.name }}</h2>
        <p>Category {{ product.category }}</p>
        <p>Qty {{ product.qty }}</p>
        <p>Price {{ product.price }}</p>
        <p>Stock {{ product.inStock ? "Available" : "Not Available" }}</p>
    </div>
</template>
<style></style>
....................................................................................
  	  Property access with compostion api with setup attribute
..................................................................................

In order access properties inside setup attribute (part of script)

Vue 3 provides global function "defineProps" , through which you can access properties.

src/components/props/ProductMaster.vue

<!-- compostion api with setup attribute -->
<script setup>
import ProductDetails from './ProductDetails.vue'
const product = {
    id: 1,
    name: 'Phone',
    category: 'Apple',
    qty: 100,
    model: 'IPHONE 15 plus',
    price: 94000,
    inStock: true
}
</script>
<template>
    <h1>Product Master</h1>
    <ProductDetails title="Product Details Page" :product="product" />
</template>
<style></style>


src/components/props/ProductDetails.vue

<!-- Props with Compostion api -with attribute  -->
<script setup>
defineProps(['title', 'product'])
</script>
<template>
    <h1>{{ title }}</h1>
    <div>
        <h1>ID {{ product.id }}</h1>
        <h2>{{ product.name }}</h2>
        <p>Category {{ product.category }}</p>
        <p>Qty {{ product.qty }}</p>
        <p>Price {{ product.price }}</p>
        <p>Stock {{ product.inStock ? "Available" : "Not Available" }}</p>
    </div>
</template>
<style></style>
....................................................................................
		 What if i want to access properties inside setup function
.....................................................................................

Note:
 if you want to property with in setup function, you have to pass props as a arg.
 props: ['title', 'product'],
    setup(props) {
        console.log(props.title)
    }


<script>
export default {
    props: ['title', 'product'],
    setup(props) {
        console.log(props.title)
    }
}
</script>
<template>
    <h1>{{ title }}</h1>
    <div>
        <h1>ID {{ product.id }}</h1>
        <h2>{{ product.name }}</h2>
        <p>Category {{ product.category }}</p>
        <p>Qty {{ product.qty }}</p>
        <p>Price {{ product.price }}</p>
        <p>Stock {{ product.inStock ? "Available" : "Not Available" }}</p>
    </div>
</template>
<style></style>

Access properties with in script with setup attribute:

<script setup>
const props = defineProps(['title', 'product'])
console.log(props.title)
</script>
<template>
    <h1>{{ title }}</h1>
    <div>
        <h1>ID {{ product.id }}</h1>
        <h2>{{ product.name }}</h2>
        <p>Category {{ product.category }}</p>
        <p>Qty {{ product.qty }}</p>
        <p>Price {{ product.price }}</p>
        <p>Stock {{ product.inStock ? "Available" : "Not Available" }}</p>
    </div>
</template>
<style></style>
....................................................................................
  	 Property Validation - Compostion api with setup attribute
....................................................................................

Sometimes i want to enforce the property data type validation,which is only for runtime verificaiton.

for eg:

i have property called age
  i define rule for agat that age must be number,it should be string.

defineProperty syntax:

i.simple syntax:

defineProps(['propName','propName'])

in the syntax, we cant enforce property rules.

2.Complex syntax: prop validation rule, default value

defineProps({
   age:Number
   id:[Number,String] // can be string or number
   name: {
    type:String,
    required: true,
    default:'name'
   },
   address: {
     type:Object
     default(rawProps){
	return {
	   city:'newCity'
	}
     }
   },
   status: {
	validator(value){
	   return ['OK','NOTOK,'SUCCESS','Failure'].includes(value)
        }
   }
})

Runtime types:
1.Number
2.String
3.Boolean
4.Array
5.Object
6.Date
7.Function
8.Symbol

Eg:

App.vue
<script setup>
import User from './components/props/User.vue';
const name = 'Subramanian'
const someno = 1
</script>
<template>
    <h1>Prop Validation</h1>
    <User :name="name" />
    <!-- App.vue?t=1701327351439:36 [Vue warn]: Invalid prop: type check failed for prop "name". Expected String with value "1", got Number with value 1. 
      at <User name=1 > 
      at <App> -->
    <User :name="someno" />
</template>

src/components/props/User.vue

<script setup>
defineProps({
    // name: String
    name: {
        type: String,
        default: 'Your name'
    }
})
</script>
<template>
    <h1>User</h1>
    <h1>Name {{ name }}</h1>
</template>
....................................................................................
				Boolean casting
....................................................................................

Props with Boolean type have special casting rules to mimic the bevavior of native boolean attributes.

Given <MyComponent/> with following declaration

defineProps({
 disabled:Boolean
})

equivalent of passing :disabled=true
<MyComponent disabled />

equivalent of passing :disabled=false
<MyComponent />


eg:

App.vue
<script setup>
import User from './components/props/User.vue';
const name = 'Subramanian'
const someno = 1
const status = true 
</script>
<template>
    <h1>Prop Validation</h1>
    <User status />
    <User  />
</template>

src/components/User.vue
<script setup>
defineProps({
    // name: String
    name: {
        type: String,
        default: 'Your name'
    },
    status: {
        type: Boolean,
        // default: false
    }
})
</script>
<template>
    <h1>User</h1>
    <h1>Name {{ name }} </h1>
    <h3>Status {{ status }}</h3>
</template>
.....................................................................................
			One way data flow model
.....................................................................................

All props forms a one way data flow model where child components cant update the properties.

			 "props are read only"


src/components/User.vue

<script setup>
const props = defineProps({
    // name: String
    name: {
        type: String,
        default: 'Your name'
    },
    status: {
        type: Boolean,
        // default: false
    }
})
props.name = 'Foo'
</script>
<template>
    <h1>User</h1>
    <h1>Name {{ name }} </h1>
    <h3>Status {{ status }}</h3>
</template>

once if try to update, you will get warning like below.

[Vue warn] Set operation on key "name" failed: target is readonly. Proxy(Object)
...................................................................................
		   State Pattern and Event Handling
...................................................................................




























